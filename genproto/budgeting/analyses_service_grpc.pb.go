// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: analyses_service.proto

package budgeting

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AnalysesServiceClient is the client API for AnalysesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnalysesServiceClient interface {
	GetSpendingReport(ctx context.Context, in *PrimaryKey, opts ...grpc.CallOption) (*SpendingReports, error)
	GetIncomeReport(ctx context.Context, in *PrimaryKey, opts ...grpc.CallOption) (*SpendingReports, error)
	GetBudgetPerformenceReport(ctx context.Context, in *PrimaryKey, opts ...grpc.CallOption) (*BudgetPerformance, error)
	GetGoalsProgressReport(ctx context.Context, in *PrimaryKey, opts ...grpc.CallOption) (*Goal, error)
}

type analysesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAnalysesServiceClient(cc grpc.ClientConnInterface) AnalysesServiceClient {
	return &analysesServiceClient{cc}
}

func (c *analysesServiceClient) GetSpendingReport(ctx context.Context, in *PrimaryKey, opts ...grpc.CallOption) (*SpendingReports, error) {
	out := new(SpendingReports)
	err := c.cc.Invoke(ctx, "/budgeting.AnalysesService/GetSpendingReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysesServiceClient) GetIncomeReport(ctx context.Context, in *PrimaryKey, opts ...grpc.CallOption) (*SpendingReports, error) {
	out := new(SpendingReports)
	err := c.cc.Invoke(ctx, "/budgeting.AnalysesService/GetIncomeReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysesServiceClient) GetBudgetPerformenceReport(ctx context.Context, in *PrimaryKey, opts ...grpc.CallOption) (*BudgetPerformance, error) {
	out := new(BudgetPerformance)
	err := c.cc.Invoke(ctx, "/budgeting.AnalysesService/GetBudgetPerformenceReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysesServiceClient) GetGoalsProgressReport(ctx context.Context, in *PrimaryKey, opts ...grpc.CallOption) (*Goal, error) {
	out := new(Goal)
	err := c.cc.Invoke(ctx, "/budgeting.AnalysesService/GetGoalsProgressReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnalysesServiceServer is the server API for AnalysesService service.
// All implementations must embed UnimplementedAnalysesServiceServer
// for forward compatibility
type AnalysesServiceServer interface {
	GetSpendingReport(context.Context, *PrimaryKey) (*SpendingReports, error)
	GetIncomeReport(context.Context, *PrimaryKey) (*SpendingReports, error)
	GetBudgetPerformenceReport(context.Context, *PrimaryKey) (*BudgetPerformance, error)
	GetGoalsProgressReport(context.Context, *PrimaryKey) (*Goal, error)
	mustEmbedUnimplementedAnalysesServiceServer()
}

// UnimplementedAnalysesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAnalysesServiceServer struct {
}

func (UnimplementedAnalysesServiceServer) GetSpendingReport(context.Context, *PrimaryKey) (*SpendingReports, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpendingReport not implemented")
}
func (UnimplementedAnalysesServiceServer) GetIncomeReport(context.Context, *PrimaryKey) (*SpendingReports, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIncomeReport not implemented")
}
func (UnimplementedAnalysesServiceServer) GetBudgetPerformenceReport(context.Context, *PrimaryKey) (*BudgetPerformance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBudgetPerformenceReport not implemented")
}
func (UnimplementedAnalysesServiceServer) GetGoalsProgressReport(context.Context, *PrimaryKey) (*Goal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoalsProgressReport not implemented")
}
func (UnimplementedAnalysesServiceServer) mustEmbedUnimplementedAnalysesServiceServer() {}

// UnsafeAnalysesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnalysesServiceServer will
// result in compilation errors.
type UnsafeAnalysesServiceServer interface {
	mustEmbedUnimplementedAnalysesServiceServer()
}

func RegisterAnalysesServiceServer(s grpc.ServiceRegistrar, srv AnalysesServiceServer) {
	s.RegisterService(&AnalysesService_ServiceDesc, srv)
}

func _AnalysesService_GetSpendingReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysesServiceServer).GetSpendingReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/budgeting.AnalysesService/GetSpendingReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysesServiceServer).GetSpendingReport(ctx, req.(*PrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalysesService_GetIncomeReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysesServiceServer).GetIncomeReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/budgeting.AnalysesService/GetIncomeReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysesServiceServer).GetIncomeReport(ctx, req.(*PrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalysesService_GetBudgetPerformenceReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysesServiceServer).GetBudgetPerformenceReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/budgeting.AnalysesService/GetBudgetPerformenceReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysesServiceServer).GetBudgetPerformenceReport(ctx, req.(*PrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalysesService_GetGoalsProgressReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysesServiceServer).GetGoalsProgressReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/budgeting.AnalysesService/GetGoalsProgressReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysesServiceServer).GetGoalsProgressReport(ctx, req.(*PrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

// AnalysesService_ServiceDesc is the grpc.ServiceDesc for AnalysesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnalysesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "budgeting.AnalysesService",
	HandlerType: (*AnalysesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSpendingReport",
			Handler:    _AnalysesService_GetSpendingReport_Handler,
		},
		{
			MethodName: "GetIncomeReport",
			Handler:    _AnalysesService_GetIncomeReport_Handler,
		},
		{
			MethodName: "GetBudgetPerformenceReport",
			Handler:    _AnalysesService_GetBudgetPerformenceReport_Handler,
		},
		{
			MethodName: "GetGoalsProgressReport",
			Handler:    _AnalysesService_GetGoalsProgressReport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "analyses_service.proto",
}
